# Importación de Librerías
from flask import Flask, render_template, Response
import cv2
import mediapipe as mp
import face_recognition
import os
import numpy as np

# Inicialización de la librería MediaPipe para detección de rostros
mpDibujo = mp.solutions.drawing_utils
ConfDibu = mpDibujo.DrawingSpec(thickness=1, circle_radius=1)

# Inicialización de la malla facial de MediaPipe
mpMallaFacial = mp.solutions.face_mesh
MallaFacial = mpMallaFacial.FaceMesh(max_num_faces=1)

# Cargar imágenes conocidas de la carpeta "known_faces"
known_faces = []
known_names = []

known_faces_dir = "known_faces"

for filename in os.listdir(known_faces_dir):
    filepath = os.path.join(known_faces_dir, filename)
    image = face_recognition.load_image_file(filepath)
    encoding = face_recognition.face_encodings(image)[0]  # Codificación de la cara
    known_faces.append(encoding)
    known_names.append(os.path.splitext(filename)[0])  # Extraer el nombre del archivo (sin extensión)

# Realizar nuestra video captura
cap = cv2.VideoCapture(0)


# Función para obtener los frames de la cámara
def gen_frame():
    while True:
        ret, frame = cap.read()

        if not ret:
            break

        else:
            # Conversión de BGR a RGB
            frameRGB = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # Procesamiento de los resultados de la malla facial
            resultados = MallaFacial.process(frameRGB)

            # Reconocimiento facial
            small_frame = cv2.resize(frame, (0, 0), fx=0.25, fy=0.25)  # Redimensionar para más velocidad
            small_frame_rgb = cv2.cvtColor(small_frame, cv2.COLOR_BGR2RGB)

            face_locations = face_recognition.face_locations(small_frame_rgb)
            face_encodings = face_recognition.face_encodings(small_frame_rgb, face_locations)

            face_names = []
            for face_encoding in face_encodings:
                matches = face_recognition.compare_faces(known_faces, face_encoding)
                name = "Desconocido"

                if True in matches:
                    first_match_index = matches.index(True)
                    name = known_names[first_match_index]

                face_names.append(name)

            # Si se detectan rostros
            if resultados.multi_face_landmarks:
                for rostros in resultados.multi_face_landmarks:
                    # Dibujo de la malla facial
                    mpDibujo.draw_landmarks(frame, rostros, mpMallaFacial.FACEMESH_TESSELATION, ConfDibu, ConfDibu)

            # Mostrar nombres en la imagen
            for (top, right, bottom, left), name in zip(face_locations, face_names):
                top, right, bottom, left = top * 4, right * 4, bottom * 4, left * 4  # Escalar a tamaño original
                cv2.rectangle(frame, (left, top), (right, bottom), (0, 255, 0), 2)
                cv2.putText(frame, name, (left, top - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 2)

            # Codificación de la imagen en formato JPEG
            suc, encode = cv2.imencode('.jpg', frame)
            frame = encode.tobytes()

            # Enviar el frame como un flujo de video
        yield (b'--frame\r\n'
               b'content-Type: image/jpeg\r\n\r\n' + frame + b'\r\n')


# Crear la aplicación Flask
app = Flask(__name__)


# Ruta principal
@app.route('/')
def index():
    return render_template('Index.html')


# Ruta de video
@app.route('/video')
def video():
    return Response(gen_frame(), mimetype='multipart/x-mixed-replace; boundary=frame')


# Ejecutar la web
if __name__ == "__main__":
    app.run(debug=True)
    cap.release()
    cv2.destroyAllWindows()
